{"name":"Funscript.Owin","tagline":"FunScript compilation middleware for OWIN","body":"### FunScript and OWIN\r\n\r\nF# to JavaScript with type providers - http://funscript.info/\r\nOWIN defines a standard interface between .NET web servers and web applications. - http://owin.org/\r\n\r\nFunScript middleware\r\n\r\n### Get Started\r\n\r\nNew F# project (Console app). Set target framework to .NET 4.5.\r\n\r\n\r\n## NuGet\r\nInstall the following packages (Nancy.Owin or the HttpListener Owin implementation can be replaced by whatever you like)\r\n\r\n```\r\nInstall-Package FunScript.Owin\r\nInstall-Package Microsoft.Owin.Host.HttpListener -Pre\r\nInstall-Package Microsoft.Owin.Hosting -pre\r\nInstall-Package Nancy.Owin\r\n```\r\n\r\n## Example\r\n\r\nA simple example. \r\n\r\n`canvas()` is export into \"/scripts/canvas.js\"\r\n\r\nIt uses Nancy to host the static files. (HTML). Put the html in the /web/ folder and access http://localhost:8080/web/Index.html (for example). Be sure to include \"/script/canvas.js\".\r\n\r\n```\r\n\r\nopen System.Reflection\r\n\r\nopen Owin\r\n\r\nopen Microsoft.Owin.Hosting\r\n\r\nopen FunScript\r\nopen FunScript.TypeScript\r\nopen FunScript.Owin\r\n\r\nopen Nancy\r\nopen Nancy.Conventions\r\n\r\n\r\n[<FunScript.JS>]\r\nmodule JS = \r\n    type ts = Api<\"../Typings/lib.d.ts\">\r\n\r\n    [<Export(\"canvas.js\")>]\r\n    let canvas() = \r\n        let canvas = unbox<ts.HTMLCanvasElement>(ts.document.getElementById(\"canvas\"))\r\n        canvas.width <- 1000.\r\n        canvas.height <- 800.\r\n        let ctx = canvas.getContext(\"2d\")\r\n        ctx.fillStyle <- \"rgb(200,0,0)\"\r\n        ctx.fillRect (10., 10., 55., 50.);\r\n        ctx.fillStyle <- \"rgba(0, 0, 200, 0.5)\"\r\n        ctx.fillRect (30., 30., 55., 50.)\r\n\r\n\r\nmodule App =\r\n    type ApplicationBootstrapper() =\r\n        inherit DefaultNancyBootstrapper()\r\n        override this.ConfigureConventions(nancyConventions:NancyConventions) =\r\n            nancyConventions.StaticContentsConventions.Add(StaticContentConventionBuilder.AddDirectory(\"web\", @\"web\"))\r\n            base.ConfigureConventions(nancyConventions);\r\n\r\n    type Startup() =\r\n        member public this.Configuration(app:IAppBuilder) =\r\n            app.UseFunScript(\"scripts\", Assembly.GetExecutingAssembly(), Interop.Components.all) |> ignore\r\n            app.UseNancy(new ApplicationBootstrapper()) |> ignore\r\n\r\n    [<EntryPoint>]\r\n    let main argv = \r\n        //end point\r\n        let url = \"http://localhost:8080\"\r\n        //web app\r\n        use a = WebApplication.Start<Startup>(url)\r\n\r\n        System.Console.WriteLine(\"Server running at {0}\",url)      \r\n        System.Console.ReadLine() |> ignore\r\n        0\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}